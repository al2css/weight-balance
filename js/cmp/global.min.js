$(document).ready(function() {
    WeightAndBalance.init();
});

var WeightAndBalance = {
    init: function() {
        console.log("##### INIT #####");
    }
}, WeightBalanceApp = angular.module("WeightBalanceApp", [ "ngRoute", "ngTouch", "ngSanitize", "ui.bootstrap" ]);

WeightBalanceApp.config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/login", {
        controller: "LoginCtrl",
        templateUrl: "app/partials/_login.html",
        controllerAs: "login"
    }).when("/my-flights", {
        controller: "FlightsCtrl",
        templateUrl: "app/partials/_my-flights.html",
        controllerAs: "myFlights"
    }).when("/available-flights", {
        controller: "FlightsCtrl",
        templateUrl: "app/partials/_available-flights.html",
        controllerAs: "myFlights"
    }).when("/flights/:id", {
        controller: "FlightCtrl",
        templateUrl: "app/partials/_flight.html",
        controllerAs: "flight"
    }).when("/home", {
        controller: "HomeCtrl",
        templateUrl: "app/partials/_home.html",
        controllerAs: "home"
    }).when("/inbox", {
        controller: "InboxCtrl",
        templateUrl: "app/partials/_inbox.html",
        controllerAs: "inbox"
    }).when("/inbox/email/:id", {
        controller: "EmailCtrl",
        templateUrl: "app/partials/_email.html",
        controllerAs: "email"
    }).when("/notifications", {
        controller: "NotificationsCtrl",
        templateUrl: "app/partials/_notifications.html",
        controllerAs: "notifications"
    }).otherwise({
        redirectTo: "/login"
    });
} ]), WeightBalanceApp.controller("HomeCtrl", [ "$scope", "$location", function($scope, $location) {
    function init() {}
    this.title = "Home", console.log(" THIS IS HOME CONTROLLER: ", this), init(), $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), WeightBalanceApp.controller("LoginCtrl", [ "$scope", "$location", function($scope, $location) {
    this.title = "Login", this.user = "", console.log(" THIS IS LOGIN CONTROLLER: ", this), 
    $scope.changeView = function(view) {
        $location.path(view);
    }, $scope.logIn = function() {
        $scope.changeView("my-flights");
    };
} ]), WeightBalanceApp.controller("FlightCtrl", [ "$scope", "$location", "$routeParams", "FlightFactory", function($scope, $location, $routeParams, FlightFactory) {
    this.title = "This flight page", this.reqFlight = {}, console.log(" THIS IS FLIGHT! CONTROLLER: ", this);
    var getFlight = FlightFactory.getFlight($routeParams);
    getFlight && getFlight.then(angular.bind(this, function(response) {
        FlightFactory.reqFlight = response, this.reqFlight = FlightFactory.reqFlight;
    }));
} ]), WeightBalanceApp.controller("FlightsCtrl", [ "$scope", "$location", "FlightsFactory", function($scope, $location, FlightsFactory) {
    this.title = "Flights page!", this.flights = {}, this.hours = 24, this.date = new Date(), 
    this.myWorkingHours = [], this.dayOfWeek = this.date.getDay(), this.currentHour = this.date.getHours(), 
    this.timespanWidth = parseFloat(100 / this.hours).toFixed(3);
    var allHours = [], todayHours = [], tomorrowHours = [];
    console.log(" THIS IS FLIGHTS CONTROLLER: ", this), FlightsFactory.getFlights().then(angular.bind(this, function() {
        this.flights = FlightsFactory.flights;
    })), $scope.setFlightToMinutes = function(timestamp) {
        var flightDate = new Date(1e3 * timestamp), flightMinutes = (flightDate.getHours(), 
        flightDate.getMinutes()), minutesOffset = parseFloat(100 * flightMinutes / 60).toFixed(3);
        return {
            left: minutesOffset + "%"
        };
    }, $scope.goToFlight = function(id, checkinOpen) {
        FlightsFactory.goToFlight(id, checkinOpen);
    }, $scope.addToMyFlights = function(obj, type) {
        FlightsFactory.addToMyFlights(obj, type);
    }, $scope.removeFlight = function(obj, from) {
        FlightsFactory.removeFlight(obj, from);
    }, $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
    for (var i = 0; i < this.hours; i++) allHours.push(i);
    for (var i = this.currentHour; i < this.hours; i++) todayHours.push(i);
    $.each(allHours, function(key) {
        -1 === todayHours.indexOf(key) && tomorrowHours.push(key);
    }), this.myWorkingHours = todayHours.concat(tomorrowHours);
} ]), WeightBalanceApp.controller("InboxCtrl", [ "$scope", "$location", "InboxFactory", function($scope, $location) {
    this.title = "Inbox", this.messages = {}, console.log(" THIS IS INBOX CONTROLLER: ", this), 
    $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), WeightBalanceApp.controller("EmailCtrl", [ "$scope", "$location", "InboxFactory", function($scope, $location) {
    this.title = "Email read", this.email = {}, console.log(" THIS IS EMAIL CONTROLLER: ", this), 
    $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), WeightBalanceApp.controller("NotificationsCtrl", [ "$scope", "$location", function($scope, $location) {
    this.title = "Notifications", this.notifications = {}, console.log(" THIS IS NOTIFICATIONS CONTROLLER: ", this), 
    $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), angular.module("WeightBalanceApp").directive("inbox", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/inbox.tmpl.html",
        controllerAs: "viewInbox",
        controller: function() {
            this.inboxMessages = {}, InboxFactory.getMessages().then(angular.bind(this, function() {
                this.inboxMessages = InboxFactory.messages;
            })), console.warn("this.inboxMessages InboxDirective: ", this), this.goToMessage = function(id) {
                InboxFactory.goToMessage(id);
            }, this.deleteMessage = function(id, index) {
                InboxFactory.deleteMessage(id, index);
            };
        },
        link: function() {}
    };
} ]), angular.module("WeightBalanceApp").directive("email", [ "$timeout", "EmailFactory", "$routeParams", function($timeout, EmailFactory, $routeParams) {
    "use strict";
    return {
        restrict: "E",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/email.tmpl.html",
        controllerAs: "email",
        controller: function() {
            this.message = {}, this.reply = function(message) {
                EmailFactory.reply(message);
            };
            var getmessage = EmailFactory.getMessage($routeParams);
            getmessage && getmessage.then(angular.bind(this, function(response) {
                EmailFactory.message = response, this.message = EmailFactory.message;
            })), console.warn("Email directive / Page: ", this);
        },
        link: function(scope, element) {
            var textarea = element.find(".email__response-text")[0];
            scope.$watch("reply", function(newVal, oldVal) {
                newVal !== oldVal && newVal && $timeout(function() {
                    textarea.focus();
                }, 0);
            });
        }
    };
} ]), angular.module("WeightBalanceApp").directive("nrmess", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/nrmessages.tmpl.html",
        controllerAs: "nrmessages",
        controller: function() {
            this.unreadMessages = {}, InboxFactory.getUnreadMessages().then(angular.bind(this, function() {
                angular.forEach(InboxFactory.unreadMessages, function(value, key) {
                    angular.isUndefined(InboxFactory.unreadMessages[key].unread) || InboxFactory.unreadMessages[key].unread || InboxFactory.unreadMessages.splice(key, 1);
                }), this.unreadMessages = InboxFactory.unreadMessages;
            })), console.warn("this.unreadMessages Nr: ", this);
        },
        link: function() {}
    };
} ]), angular.module("WeightBalanceApp").directive("nrnotif", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/nrnotif.tmpl.html",
        controllerAs: "nrnotif",
        controller: function() {
            this.notifications = {}, InboxFactory.getNotifications().then(angular.bind(this, function() {
                this.notifications = InboxFactory.notifications;
            })), console.warn("this.nrnotif Nr : ", this);
        },
        link: function() {}
    };
} ]), angular.module("WeightBalanceApp").directive("notification", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/notification.tpl.html",
        controllerAs: "notificationPage",
        controller: function() {
            this.notification = {}, InboxFactory.getNotifications().then(angular.bind(this, function() {
                this.notification = InboxFactory.notifications;
            })), console.warn("this.notification page: ", this);
        },
        link: function() {}
    };
} ]), angular.module("WeightBalanceApp").directive("lowerDeck", [ "FlightFactory", "$routeParams", function(FlightFactory, $routeParams) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/lowerDeck.tmpl.html",
        controllerAs: "lowerDeck",
        controller: function() {
            this.lowerdeck = {}, this.fixedWidth = 1200;
            var flight = FlightFactory.getFlight($routeParams);
            flight && flight.then(angular.bind(this, function(response) {
                this.lowerdeck = response.lower_deck_layout, this.scaledWidth = FlightFactory.px2InchRatio(this.fixedWidth, this.lowerdeck.deckLength);
            })), this.setStyle = function(centroid, width, height, lateral_adjust, uld_compatibility_group) {
                var axisPoint = parseFloat(centroid * this.scaledWidth).toFixed(3), width = parseFloat(width * this.scaledWidth).toFixed(3), height = parseFloat(height * this.scaledWidth).toFixed(3), lateralAdjust = parseFloat(lateral_adjust).toFixed(2), compatibility = uld_compatibility_group;
                switch (compatibility) {
                  case "A":
                    return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        marginTop: -1 * parseInt(height / 2, 10) + "px"
                    };
                    break;

                  case "B":
                    return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        marginTop: -1 * parseInt(height / 2, 10) + "px"
                    };
                    break;

                  case "C":
                    if (lateralAdjust > 0) return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        top: "50%",
                        marginTop: -1 * parseInt(height, 10) + "px"
                    };
                    if (0 > lateralAdjust) return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        bottom: "50%",
                        marginBottom: -1 * parseInt(height, 10) + "px"
                    };
                    break;

                  case "X":
                    return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        top: "50%",
                        marginTop: -1 * parseInt(height / 2, 10) + "px"
                    };
                    break;

                  case "E":
                    return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        marginTop: -1 * parseInt(height / 2, 10) + "px"
                    };
                    break;

                  case "F":
                    return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        marginTop: -1 * parseInt(height / 2, 10) + "px"
                    };
                    break;

                  case "NA":
                    return {
                        width: width + "px",
                        height: height + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        marginTop: -1 * parseInt(height / 2, 10) + "px"
                    };
                    break;

                  case "Y":
                    if (lateralAdjust > 0) return {
                        width: width + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        top: "0px"
                    };
                    if (0 > lateralAdjust) return {
                        width: width + "px",
                        right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                        bottom: "0px"
                    };
                    break;

                  default:
                    return !1;
                }
            }, console.warn("lowerDeck directive : ", this);
        },
        link: function() {}
    };
} ]), angular.module("WeightBalanceApp").directive("uld", [ "FlightFactory", "$routeParams", function(FlightFactory, $routeParams) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/uldItems.tmpl.html",
        controllerAs: "uldItems",
        controller: function() {
            this.layout = {}, this.fixedWidth = 1200;
            var flight = FlightFactory.getFlight($routeParams);
            flight && flight.then(angular.bind(this, function(response) {
                this.layout = response.lower_deck_layout, this.scaledWidth = FlightFactory.px2InchRatio(this.fixedWidth, this.layout.deckLength);
            })), this.setStyle = function(width, height, uld_compatibility_group) {
                var width = parseFloat(width * this.scaledWidth).toFixed(3), height = parseFloat(height * this.scaledWidth).toFixed(3);
                return {
                    width: width + "px",
                    height: height + "px",
                    marginTop: -1 * parseInt(height / 2, 10) + "px"
                };
            }, console.warn("uld directive : ", this);
        },
        link: function() {}
    };
} ]), angular.module("WeightBalanceApp").directive("draggable", function() {
    "use strict";
    return {
        restrict: "A",
        scope: !1,
        link: function(scope, element, attrs) {
            var dropTarget = $(".compatibilityClass" + attrs.draggable).not(".uld_assigned");
            element.draggable({
                start: function() {
                    console.log("START!"), $(".lowerDeck").addClass("workingWith" + attrs.draggable);
                },
                drag: function() {
                    console.log("DRAG!");
                },
                stop: function() {
                    $(".lowerDeck").removeClass("workingWith" + attrs.draggable), console.log("STOP!");
                },
                revert: function(event) {
                    return !event;
                },
                revertDuration: 100,
                addClasses: !1,
                opacity: .5,
                scope: "compatible" + attrs.draggable,
                zIndex: 200,
                cursor: "move",
                containment: ".inside_page",
                snap: ".centroids.compatibilityClass" + attrs.draggable,
                snapMode: "	inner",
                snapTolerance: 20,
                refreshPositions: !0
            }), dropTarget.droppable({
                scope: "compatible" + attrs.draggable,
                activeClass: "toDropHere",
                drop: function(event, ui) {
                    console.log("New XHR here!!!"), $(this).addClass("uld_assigned"), $(this).droppable("disable"), 
                    ui.draggable.draggable("disable", 1);
                }
            });
        }
    };
}), angular.module("WeightBalanceApp").filter("getArrayFilter", function() {
    "use strict";
    return function(input, total, preselected_length) {
        total = parseInt("number" == typeof preselected_length ? preselected_length : total);
        for (var i = 0; total > i; i++) input.push(i);
        return input;
    };
}), angular.module("WeightBalanceApp").filter("numberFixedLen", function() {
    return function(n, len) {
        var num = parseInt(n, 10);
        if (len = parseInt(len, 10), isNaN(num) || isNaN(len)) return n;
        for (num = "" + num; num.length < len; ) num = "0" + num;
        return num;
    };
}), angular.module("WeightBalanceApp").factory("InboxFactory", [ "$q", "$http", "$location", function($q, $http, $location) {
    "use strict";
    var exports = {};
    return exports.messages = {}, exports.unreadMessages = {}, exports.notifications = {}, 
    exports.goToMessage = function(id) {
        angular.isNumber(id) && $location.path("inbox/email/" + id);
    }, exports.deleteMessage = function(id, index) {
        this.messages.splice(index, 1), console.log("mess nr:  ", exports.messages.length);
    }, exports.getMessages = function() {
        var deferred = $q.defer();
        return $http.get("app/json/emails.json").success(function(data) {
            exports.messages = data, deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        });
        return deferred.promise;
    }, exports.getUnreadMessages = function() {
        var deferred = $q.defer();
        return $http.get("app/json/emails.json").success(function(data) {
            exports.unreadMessages = data, deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        });
        return deferred.promise;
    }, exports.getNotifications = function() {
        var deferred = $q.defer();
        return $http.get("app/json/notifications.json").success(function(data) {
            exports.notifications = data, deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        });
        return deferred.promise;
    }, exports.getNrMessages = function() {
        return exports.messages.length;
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("EmailFactory", [ "$q", "$http", "$routeParams", function($q, $http) {
    "use strict";
    var exports = {};
    return exports.messages = {}, exports.reply = function(message) {
        message && alert("Reply content: " + message);
    }, exports.getMessage = function(params) {
        if (params.id) {
            var deferred = $q.defer();
            return $http.get("app/json/message/" + params.id + ".json").success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("FlightsFactory", [ "$q", "$http", "$routeParams", "$location", function($q, $http, $routeParams, $location) {
    "use strict";
    var exports = {};
    return exports.flights = {}, exports.changeView = function(view) {
        $location.path(view);
    }, exports.goToFlight = function(id, checkinOpen) {
        angular.isNumber(id) && checkinOpen && exports.changeView("flights/" + id);
    }, exports.addToMyFlights = function(obj, parent) {
        if (!angular.isUndefined(obj.id) && angular.isNumber(obj.id)) {
            var departingTime = 1e3 * obj.departing_time, currentTime = 1e3 * exports.flights.login_date, isNr = angular.isNumber(departingTime) && angular.isNumber(currentTime);
            if (console.log(" Departing Time: ", departingTime, new Date(departingTime)), console.log(" Now: ", currentTime, new Date(currentTime)), 
            !(isNr && departingTime >= currentTime)) return alert("This flight was at " + new Date(departingTime) + ", and now is " + new Date(currentTime) + "!"), 
            !1;
            exports.flights.assigned_flights.push(obj), console.log(" My dashboard / dashboard length: ", exports.flights.assigned_flights.length, exports.flights.assigned_flights), 
            exports.removeFlight(obj, parent);
        }
    }, exports.removeFlight = function(obj, removeFrom) {
        angular.isUndefined(obj) || (console.log("deleted item: ", obj), removeFrom.splice(removeFrom.indexOf(obj), 1));
    }, exports.getFlights = function() {
        var deferred = $q.defer();
        return $http.get("app/json/flights.json").success(function(data) {
            exports.flights = data, deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        });
        return deferred.promise;
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("FlightFactory", [ "$q", "$http", "$routeParams", "$location", function($q, $http, $routeParams, $location) {
    "use strict";
    var exports = {};
    return exports.flight = {}, exports.changeView = function(view) {
        $location.path(view);
    }, exports.px2InchRatio = function(px, inch) {
        return !angular.isUndefined(inch) && angular.isNumber(inch) ? parseFloat(px / inch).toFixed(3) : void 0;
    }, exports.getFlight = function(params) {
        if (params.id) {
            var deferred = $q.defer();
            return $http.get("app/json/flight/flightID" + params.id + ".json").success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports;
} ]);
//# sourceMappingURL=global.min.map